{"version":3,"sources":["G5/InstrumentContext.js","G5/Screen/ArtificialHorizon/index.js","G5/Screen/Airspeed/Measure/index.js","G5/Screen/Airspeed/index.js","G5/Screen/Altimeter/index.js","G5/Screen/index.js","G5/index.js","Playground/index.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","ArtificialHorizon","useContext","InstrumentContext","pitch","roll","style","transform","className","Measure","ias","toString","parseHundredsDigit","parseTensDigit","str","length","parseOnesDigit","Airspeed","Altimeter","Screen","G5","props","Provider","value","Playground","useState","setPitch","setRoll","setIAS","type","min","max","onChange","e","parseInt","target","parsed","parseAndValidateIAS","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.804770e2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default React.createContext();\n","import React, { useContext } from \"react\";\nimport InstrumentContext from \"../../InstrumentContext\";\n\nimport \"./ArtificialHorizon.css\";\n\nconst ArtificialHorizon = () => {\n  const { pitch, roll } = useContext(InstrumentContext);\n  const style = {\n    transform: `scale(2) translateY(${pitch}px) rotate(${roll}deg)`,\n  };\n\n  return (\n    <div className=\"ArtificialHorizon\" style={style}>\n      <div className=\"Sky\" />\n      <div className=\"Horizon\" />\n      <div className=\"Ground\" />\n    </div>\n  );\n};\n\nexport default ArtificialHorizon;\n","import React from \"react\";\n\nimport \"./Measure.css\";\n\nconst parseHundredsDigit = (ias) => {\n  if (ias >= 100) {\n    return ias.toString()[0];\n  }\n\n  return null;\n};\n\nconst parseTensDigit = (ias) => {\n  if (ias >= 100) {\n    return ias.toString()[1];\n  }\n\n  if (ias >= 10) {\n    return ias.toString()[0];\n  }\n\n  return null;\n};\n\nconst parseOnesDigit = (ias) => {\n  const str = ias.toString();\n\n  return str[str.length - 1];\n};\n\nconst Measure = ({ ias }) => {\n  return (\n    <div className=\"Measure\">\n      <div className=\"Caret\" />\n      <div className=\"MeasureInner\">\n        <div className=\"Digits\">\n          <span className=\"Digit\">{parseHundredsDigit(ias)}</span>\n          <span className=\"Digit\">{parseTensDigit(ias)}</span>\n          <span className=\"Digit OnesDigit\">{parseOnesDigit(ias)}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Measure;\n","import React, { useContext } from \"react\";\nimport InstrumentContext from \"../../InstrumentContext\";\n\nimport \"./Airspeed.css\";\n\nimport Measure from \"./Measure\";\n\nconst Airspeed = () => {\n  const { ias } = useContext(InstrumentContext);\n\n  return (\n    <div className=\"Airspeed\">\n      <Measure ias={ias} />\n\n      <div className=\"AirspeedOverlay\" />\n      <div className=\"AirspeedTape\" />\n    </div>\n  );\n};\n\nexport default Airspeed;\n","import React from \"react\";\n\nimport \"./Altimeter.css\";\n\nconst Altimeter = () => {\n  return (\n    <div className=\"Altimeter\">\n      0\n      <div className=\"AltimeterOverlay\" />\n      <div className=\"AltimeterTape\" />\n    </div>\n  );\n};\n\nexport default Altimeter;\n","import React from \"react\";\n\nimport ArtificialHorizon from \"./ArtificialHorizon\";\nimport Airspeed from \"./Airspeed\";\nimport Altimeter from \"./Altimeter\";\nimport \"./Screen.css\";\n\nconst Screen = () => (\n  <div className=\"Screen\">\n    <ArtificialHorizon />\n    <Airspeed />\n    <Altimeter />\n  </div>\n);\n\nexport default Screen;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport InstrumentContext from \"./InstrumentContext\";\nimport Screen from \"./Screen\";\nimport \"./G5.css\";\n\nconst G5 = (props) => (\n  <div className=\"G5\">\n    <div className=\"PrimaryContainer\">\n      <div className=\"Logo\">GARMIN</div>\n      <div className=\"Screen\">\n        <InstrumentContext.Provider value={props}>\n          <Screen />\n        </InstrumentContext.Provider>\n      </div>\n    </div>\n\n    <div className=\"Controls\">\n      <div className=\"Power\" />\n    </div>\n  </div>\n);\n\nG5.propTypes = {\n  pitch: PropTypes.number,\n};\n\nexport default G5;\n","import React, { useState } from \"react\";\n\nimport G5 from \"../G5\";\n\nimport \"./Playground.css\";\n\nconst minIAS = 0;\nconst maxIAS = 250;\n\nconst parseAndValidateIAS = (value) => {\n  if (value === \"\") {\n    return minIAS;\n  }\n\n  const parsed = parseInt(value);\n\n  if (parsed > maxIAS) {\n    return maxIAS;\n  }\n\n  if (parsed < minIAS) {\n    return minIAS;\n  }\n\n  return parsed;\n};\n\nconst Playground = () => {\n  const [pitch, setPitch] = useState(0);\n  const [roll, setRoll] = useState(0);\n  const [ias, setIAS] = useState(0);\n\n  return (\n    <div className=\"Playground\">\n      <div className=\"Sidebar\">\n        <div className=\"Header\">Garmin G5</div>\n\n        <div className=\"Inputs\">\n          <div className=\"Input\">\n            <div className=\"Label\">Pitch</div>\n\n            <div className=\"Control\">\n              <input\n                type=\"range\"\n                min=\"-30\"\n                max=\"30\"\n                value={pitch}\n                onChange={(e) => setPitch(parseInt(e.target.value))}\n              />\n            </div>\n          </div>\n\n          <div className=\"Input\">\n            <div className=\"Label\">Roll</div>\n\n            <div className=\"Control\">\n              <input\n                type=\"range\"\n                min=\"-45\"\n                max=\"45\"\n                value={roll}\n                onChange={(e) => setRoll(parseInt(e.target.value))}\n              />\n            </div>\n          </div>\n\n          <div className=\"Input\">\n            <div className=\"Label\">Airspeed</div>\n\n            <div className=\"Control\">\n              <input\n                type=\"number\"\n                min={minIAS.toString()}\n                max={maxIAS.toString()}\n                value={ias}\n                onChange={(e) => setIAS(parseAndValidateIAS(e.target.value))}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"Container\">\n        <G5 pitch={pitch} roll={roll} ias={ias} />\n      </div>\n    </div>\n  );\n};\n\nexport default Playground;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Playground from \"./Playground\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Playground />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}